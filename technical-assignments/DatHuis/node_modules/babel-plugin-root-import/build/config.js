"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.normalizeConfig = exports.RootImportConfigError = void 0;

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (call && (typeof call === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _wrapNativeSuper(Class) { var _cache = typeof Map === "function" ? new Map() : undefined; _wrapNativeSuper = function _wrapNativeSuper(Class) { if (Class === null || !_isNativeFunction(Class)) return Class; if (typeof Class !== "function") { throw new TypeError("Super expression must either be null or a function"); } if (typeof _cache !== "undefined") { if (_cache.has(Class)) return _cache.get(Class); _cache.set(Class, Wrapper); } function Wrapper() { return _construct(Class, arguments, _getPrototypeOf(this).constructor); } Wrapper.prototype = Object.create(Class.prototype, { constructor: { value: Wrapper, enumerable: false, writable: true, configurable: true } }); return _setPrototypeOf(Wrapper, Class); }; return _wrapNativeSuper(Class); }

function isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _construct(Parent, args, Class) { if (isNativeReflectConstruct()) { _construct = Reflect.construct; } else { _construct = function _construct(Parent, args, Class) { var a = [null]; a.push.apply(a, args); var Constructor = Function.bind.apply(Parent, a); var instance = new Constructor(); if (Class) _setPrototypeOf(instance, Class.prototype); return instance; }; } return _construct.apply(null, arguments); }

function _isNativeFunction(fn) { return Function.toString.call(fn).indexOf("[native code]") !== -1; }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var RootImportConfigError =
/*#__PURE__*/
function (_Error) {
  _inherits(RootImportConfigError, _Error);

  function RootImportConfigError(message) {
    var _this;

    _classCallCheck(this, RootImportConfigError);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(RootImportConfigError).call(this, `babel-plugin-root-import: ${message}`));
    _this.name = 'RootImportConfigError';
    return _this;
  }

  return RootImportConfigError;
}(_wrapNativeSuper(Error));

exports.RootImportConfigError = RootImportConfigError;

var str = function str(x) {
  return JSON.stringify(x);
};

var normalizeConfig = function normalizeConfig(_config) {
  var config = _config;

  if (!config) {
    config = [{
      'segment': {
        '~': 'src'
      }
    }];
  }

  if (!Array.isArray(config)) {
    config = [config];
  }

  var results = [];
  config.forEach(function (item, index) {
    if (!item || typeof item !== 'object') {
      var type = `${typeof item} ${item && item.constructor && item.constructor.name || 'unknown'}`;
      throw new RootImportConfigError(`expected an object at config index ${index} but got (${type})`);
    }

    var firstKey = null;
    Object.keys(item).forEach(function (key) {
      var value = item[key];

      if (firstKey) {
        throw new RootImportConfigError(`expected only one key on config index ${index}, received ${str(firstKey)} and ${str(key)}`);
      }

      firstKey = key;

      if (key !== 'segment' && key !== 'prefix') {
        throw new RootImportConfigError(`unexpected key ${str(key)} at config index ${index}. Valid keys are 'segment' or 'prefix'`);
      }

      if (!value || typeof value !== 'object') {
        throw new RootImportConfigError(`expected value for ${str(key)} at config index ${index} to be an object like {"~": "src"}`);
      }

      var valueKeys = Object.keys(value);

      if (valueKeys.length === 0) {
        throw new RootImportConfigError(`expected 1 or more properties for ${str(key)} at config index ${index}, e.g. {"~": "src"}`);
      }

      valueKeys.forEach(function (valueKey) {
        var dest = value[valueKey];

        if (!dest) {
          throw new RootImportConfigError(`expected value for .${str(key)}.${str(valueKey)} at config index ${index} to be an object like {"~": "src"}`);
        }

        results.push({
          'type': key,
          'value': valueKey,
          dest
        });
      });
    });
  });
  return results;
};

exports.normalizeConfig = normalizeConfig;